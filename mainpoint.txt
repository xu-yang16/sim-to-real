1. 清华大学自动化系，杨旭， 论文题目

3. 数据中心节能的任务。据统计，数据中心用于制冷的能耗占到1/3以上，
    数据中心温度过高->宕机；温度过低->能耗增加；
    如图，气流影响->温度场复杂->需要对机房内的温度场做精细的测量；传感器网络

4. 碳达峰碳中和的战略；传统方法（化石燃料消耗量推算，C14含量测算）相差巨大，PNAS文章；
    我们所的刘云浩老师 使用传感器网络
5. 传感器网络规模增大：实时的数据传输和处理 ->对中心节点的通讯带宽和计算能力要求越来越高->分布式算法（优点）。
    DSE -> 基于自己的观测值和与邻居的信息交换 -> 
    相比中心化的算法，不能拿到全部的信息->性能有损失 -> 如何分析并降低差异
6. 线性系统 -> 把温度场PDE方程离散化得到一个线性系统，n个状态m个传感器。

为什么要估计所有状态？

7. 三种比较典型的算法 -> consensus on estimate, measurement, PDF

8. 共同的特点：消息复杂度为，有一些稳定性条件，状态估计的方差都没有显式的形式，全局最优性（达到卡曼的估计值）难以保证。

9. 双向耦合，在local filter的基础上直接加了一个consensus项 ->难以分析性能表现。
   把这两个过程进行单向的解耦，consensus不要影响local filter -> 如何设计local filter？如何使用consensus算法？

10. 卡曼滤波 -> 在LTI高斯系统中是最优的估计器

11. 因为A,C可观 ->卡曼滤波器会很快收敛到稳态 -> 稳态下的卡曼增益是K。
    把卡曼看做是一个线性系统 -> 可以拆分出每个输入对\hat x造成的响应的叠加。

12. 在一些数学上的假设条件下，对卡曼分解为两个过程：单个local filter做的事情
        中心节点对这些local filter的局部状态进行加权求和，就得到了\hat x
    \hat\xi_i(k)具体的物理含义 -> 其实是Gix的一个稳定估计。Gi是传感器i的可观空间。

13. 每个local filter是一个线性系统，输入yi可能是一个不稳定的。->对yi做一个预测

    先讲beta*xi_i做预测，再讲beta满足矩阵方程，方程数量多于未知数数量 -> CH定理进行换基
    
    就可以把local filter做一个变形，输入变成稳定的zi

14. 上面是local filter做的事情，下面是中心化的节点做的加法。
    经过分解，从卡曼A-KCA的形式变为了分块对角的形式 -> 有一些分布式的雏形了。
    求和可以用consensus算法来完成。

15. 做估计 -> 但是只能拿到自己的zi，更新自己的，eta_ii
    对其他传感器的局部状态做估计，通过consensus来减小估计的误差
    
    因为zi是稳定的，所以我们如果暂时忽略zi

16. 没有噪声的线性时不变系统的同步问题
    正是consensus能够解决的问题 -> 零输入响应。
    每个agent的初始状态不同，要通过ui把大家聚到一起。（对误差进行修正的过程）
    强同步：基本上无向图都是consistent，有向图可以通过push-sum的方式来实现。
    指数收敛：也是consensus的一个基本性质。
    满足强同步的算法很多。

17. 如果在我们的算法框架下使用强同步算法，将会有两个性质：状态均值等于卡曼给出的最优状态估计。
    
    每个节点状态估计的方差分解为两部分->都是有界的，并可以精确计算出。

18. 游老师算法，这种形式的ui可以在一定条件下保证consensus（能控性，系统不稳定性和通讯拓扑的连通性）

19. 应用游老师算法到我们的框架下。local filter upate->consensus同步->更新状态估计
    \Delta_i是一个m*1维的向量，消息复杂度是O(m)

20. 卡曼分解，动态过程下放到local filter来完成，最后只需要做一个加法，加法可以由consensus来实现。
    保证了local filter没有信息损失，
    解耦，consensus不会影响local filter
    任何强同步算法

21. 目前消息复杂度与传感器规模相关，消息复杂度可以进一步降低。同样的传递函数，目前是mn维的实现，寻找阶次更小的实现。

24. 不随着传感器数量的上升而上升。对于特定的场景，比如温度监测，n会很大.
    误差分为两部分，KF的误差是无论如何无法克服的，算法收敛性完全取决于consensus的过程。
    稳定性与consensus算法收敛的条件一致。
    如果consensus误差为0，就达到了全局最优性。

25. 为了直观地把我们的DSE算法状态估计的效果可视化，我们使用经典的例子——倒立摆。
    四个状态是位移，速度，角度，角速度；四个传感器分别观测...第四个传感器不能观测到全部的状态。
    使用第4个传感器的状态估计丢到LQR控制器生成控制信号。
    通讯拓扑是一个环，第4个传感器需要从邻居获取信息，才能得到一个比较准确的状态估计。

28. 为了测量通讯，把15个树莓派拿到实验室楼下的树林，通过自组网连成通讯拓扑。
    真实环境的温度场无法获取，所以我们使用了离散后PDE生成的数据。

31. 我们也做了一个真实温度数据的实验，实验室环境

32. 平面图。把热扩散的PDE方程离散化为25个状态，部署了12个温度传感器和树莓派



思考问题的方向：理论？实践？有没有简单的解决办法？
问题：
1. 为什么要做结构分解？
11.做加法的过程还是需要一个consensus的算法来解决
12.要把yi中稳定的、可以预测的部分提取出来。

2. 是不是只有系统发散(yi不稳定)的时候，这种DSE算法才有优势？
21.需要同步的这个系统在每个时刻都会有输入进来。
比如对于温度监测的例子，由于能量守恒，系统矩阵有个特征根是1。

3. 每个传感器是否有必要估计整个状态。
31. 物联网中有一个概念是“边缘计算”，每个小区域独立处理自己的信息。
例如一个数据中心内。
32. 从理论上来说，我们让每个传感器都要恢复最优的卡曼状态估计。如果不需要最优性，
可以尝试做一个有损的降维。

4. 很多算法可以保证consensus error=0的时候，达到KF的表现。
41. 现实中不能做无穷多次的consensus迭代。
由于我们的算法把local filter和consensus解耦开，于是就可以对有限次迭代后的性能做分析。

5. 在稳态下yi也在0的附近？
可以参考倒立摆的例子。






















